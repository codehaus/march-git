Return-Path: <mproctor@codehaus.org>
Mailing-List: contact dev-help@drools.codehaus.org; run by ezmlm
Delivered-To: mailing list dev@drools.codehaus.org
Received: (qmail 11491 invoked from network); 9 Sep 2004 09:30:04 -0000
Received: from ams-iport-1.cisco.com (144.254.224.140)
  by codehaus.org with SMTP; 9 Sep 2004 09:30:04 -0000
Received: from ams-core-1.cisco.com (144.254.224.150)
  by ams-iport-1.cisco.com with ESMTP; 09 Sep 2004 11:33:30 +0200
X-BrightmailFiltered: true
Received: from [144.254.193.93] (mproctor@dhcp-ams-cam-vl10-144-254-193-93.cisco.com [144.254.193.93])
	by ams-core-1.cisco.com (8.12.10/8.12.6) with ESMTP id i899Qx2P018675
	for <dev@drools.codehaus.org>; Thu, 9 Sep 2004 11:27:00 +0200 (MEST)
Message-ID: <414021E3.8060309@codehaus.org>
Date: Thu, 09 Sep 2004 11:26:59 +0200
From: Mark Proctor <mproctor@codehaus.org>
User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.8a3) Gecko/20040817
X-Accept-Language: en, en-us, de
MIME-Version: 1.0
To: dev@drools.codehaus.org
Content-Type: multipart/mixed;
 boundary="------------060706030809010901010608"
Subject: janino 2.0.9 and unparse visitor

--------------060706030809010901010608
Content-Type: multipart/alternative;
 boundary="------------010406020505000408040407"


--------------010406020505000408040407
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit

Janino 2.0.9 is now available with a working unparse visitor, this 
builds on the work in current CVS, so users can now see what the 
"synthetic" java looks like. This is where we take the users 
condition/consequence and add imports and make application data and 
declarations available as variables automagically.

To give you an idea of what the resulting code looks like when its run I 
have included some outputs from examples fibonacci, state and petstore; 
the petstore example also shows application data being used.

Mark

/**
 * Fibonacci
 */
import org.drools.examples.fibonacci.Fibonacci;
public class DroolsConsequence implements 
org.drools.semantics.java.Expr$ConditionScript {
  public boolean invoke(final org.drools.spi.Tuple tuple,
                        final org.drools.rule.Declaration[] decls,
                        final org.drools.spi.KnowledgeHelper drools,
                        final java.util.Map applicationData)
    throws java.lang.Exception
  {
    final org.drools.examples.fibonacci.Fibonacci f3 = 
(org.drools.examples.fibonacci.Fibonacci) tuple.get(decls[0]);
    return (f3.getValue() == -1);
  }
}

/**
 * State
 */
import org.drools.examples.state.State;
public class DroolsConsequence implements 
org.drools.semantics.java.BlockConsequence$Script {
  public void invoke(final org.drools.spi.Tuple tuple,
                     final org.drools.rule.Declaration[] decls,
                     final org.drools.spi.KnowledgeHelper drools,
                     final java.util.Map applicationData)
    throws java.lang.Exception
  {
      final org.drools.examples.state.State b = 
(org.drools.examples.state.State) tuple.get(decls[0]);
      final org.drools.examples.state.State d = 
(org.drools.examples.state.State) tuple.get(decls[1]);
      System.out.println(d.getName() + " finished");
      d.setState("FINISHED");
      drools.modifyObject(d);
  }
}
/**
 * Petstore
 */
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.drools.examples.petstore.ShoppingCart;
public class DroolsConsequence implements 
org.drools.semantics.java.BlockConsequence$Script {
  public void invoke(final org.drools.spi.Tuple tuple,
                     final org.drools.rule.Declaration[] decls,
                     final org.drools.spi.KnowledgeHelper drools,
                     final java.util.Map applicationData)
    throws java.lang.Exception
  {
    final org.drools.examples.petstore.ShoppingCart cart = 
(org.drools.examples.petstore.ShoppingCart) tuple.get(decls[0]);
    final javax.swing.JFrame frame = (javax.swing.JFrame) 
applicationData.get("frame");
    Object[] options = new Object[] {
      "Yes",
      "No",
    };
    int n = JOptionPane.showOptionDialog(frame,
      "Would you like to buy a tank for your " +
      cart.getItems("Gold Fish").size() + " fish?",
      "Purchase Suggestion",
      JOptionPane.YES_NO_OPTION,
      JOptionPane.QUESTION_MESSAGE,
      null,
      options,
      options[0]);
      System.out.print("SUGGESTION: Would you like to buy a tank for your "
        + cart.getItems("Gold Fish").size() + " fish? - ");
      if (n == 0) {
        cart.addItem(new org.drools.examples.petstore.CartItem("Fish 
Tank", 25.0D));
        System.out.println("Yes");
      } else {
        System.out.println("No");
      }
      cart.setState("Suggested Fish Tank", true
    );
    drools.modifyObject(cart);
  }
}


--------------010406020505000408040407
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta content="text/html;charset=ISO-8859-1" http-equiv="Content-Type">
  <title></title>
</head>
<body bgcolor="#ffffff" text="#000000">
<meta content="text/html;charset=ISO-8859-1" http-equiv="Content-Type">
<title></title>
Janino 2.0.9 is now available with a working unparse visitor, this
builds on the work in current CVS, so users can now see what the
"synthetic" java looks like. This is where we take the users
condition/consequence and add imports and make application data and
declarations available as variables automagically.<br>
<br>
To give you an idea of what the resulting code looks like when its run
I have included some outputs from examples fibonacci, state and
petstore; the petstore example also shows application data being used.<br>
<br>
Mark<br>
<br>
<font face="Courier New, Courier, monospace">/**<br>
&nbsp;* Fibonacci <br>
&nbsp;*/ <br>
import org.drools.examples.fibonacci.Fibonacci;<br>
public class DroolsConsequence implements
org.drools.semantics.java.Expr$ConditionScript {<br>
&nbsp; public boolean invoke(final org.drools.spi.Tuple tuple, <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final org.drools.rule.Declaration[] decls, <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final org.drools.spi.KnowledgeHelper drools, <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final java.util.Map applicationData) <br>
&nbsp;&nbsp;&nbsp; throws java.lang.Exception <br>
&nbsp; {<br>
&nbsp;&nbsp;&nbsp; final org.drools.examples.fibonacci.Fibonacci f3 =
(org.drools.examples.fibonacci.Fibonacci) tuple.get(decls[0]);<br>
&nbsp;&nbsp;&nbsp; return (f3.getValue() == -1);<br>
&nbsp; }<br>
} <br>
<br>
/**<br>
&nbsp;* State<br>
&nbsp;*/ <br>
import org.drools.examples.state.State;<br>
public class DroolsConsequence implements
org.drools.semantics.java.BlockConsequence$Script {<br>
&nbsp; public void invoke(final org.drools.spi.Tuple tuple, <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final org.drools.rule.Declaration[] decls, <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final org.drools.spi.KnowledgeHelper drools,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final java.util.Map applicationData) <br>
&nbsp;&nbsp;&nbsp; throws java.lang.Exception <br>
&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final org.drools.examples.state.State b =
(org.drools.examples.state.State) tuple.get(decls[0]);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final org.drools.examples.state.State d =
(org.drools.examples.state.State) tuple.get(decls[1]);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(d.getName() + " finished");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; d.setState("FINISHED");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; drools.modifyObject(d);<br>
&nbsp; }<br>
}<br>
/**<br>
&nbsp;* Petstore <br>
&nbsp;*/ <br>
import javax.swing.JFrame;<br>
import javax.swing.JOptionPane;<br>
import org.drools.examples.petstore.ShoppingCart;<br>
public class DroolsConsequence implements
org.drools.semantics.java.BlockConsequence$Script {<br>
&nbsp; public void invoke(final org.drools.spi.Tuple tuple, <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final org.drools.rule.Declaration[] decls, <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final org.drools.spi.KnowledgeHelper drools,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final java.util.Map applicationData) <br>
&nbsp;&nbsp;&nbsp; throws java.lang.Exception <br>
&nbsp; {<br>
&nbsp;&nbsp;&nbsp; final org.drools.examples.petstore.ShoppingCart cart =
(org.drools.examples.petstore.ShoppingCart) tuple.get(decls[0]);<br>
&nbsp;&nbsp;&nbsp; final javax.swing.JFrame frame = (javax.swing.JFrame)
applicationData.get("frame");<br>
&nbsp;&nbsp;&nbsp; Object[] options = new Object[] {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Yes",<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "No",<br>
&nbsp;&nbsp;&nbsp; };<br>
&nbsp;&nbsp;&nbsp; int n = JOptionPane.showOptionDialog(frame, <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Would you like to buy a tank for your " + <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cart.getItems("Gold Fish").size() + " fish?", <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Purchase Suggestion", <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; JOptionPane.YES_NO_OPTION, <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; JOptionPane.QUESTION_MESSAGE, <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null, <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; options, <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; options[0]);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print("SUGGESTION: Would you like to buy a tank for
your " <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + cart.getItems("Gold Fish").size() + " fish? - ");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (n == 0) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cart.addItem(new org.drools.examples.petstore.CartItem("Fish
Tank", 25.0D));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Yes");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("No");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cart.setState("Suggested Fish Tank", true<br>
&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp;&nbsp; drools.modifyObject(cart);<br>
&nbsp; }<br>
}<br>
</font><br>
</body>
</html>

--------------010406020505000408040407--

--------------060706030809010901010608
Content-Type: text/plain;
 name="janino example.txt"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline;
 filename="janino example.txt"

/**
 * Fibonacci
 */
import org.drools.examples.fibonacci.Fibonacci;
public class DroolsConsequence implements org.drools.semantics.java.Expr$ConditionScript {
  public boolean invoke(final org.drools.spi.Tuple tuple,
                        final org.drools.rule.Declaration[] decls,
                        final org.drools.spi.KnowledgeHelper drools,
                        final java.util.Map applicationData)
    throws java.lang.Exception
  {
    final org.drools.examples.fibonacci.Fibonacci f3 = (org.drools.examples.fibonacci.Fibonacci) tuple.get(decls[0]);
    return (f3.getValue() == -1);
  }
}

/**
 * State
 */
import org.drools.examples.state.State;
public class DroolsConsequence implements org.drools.semantics.java.BlockConsequence$Script {
  public void invoke(final org.drools.spi.Tuple tuple,
                     final org.drools.rule.Declaration[] decls,
                     final org.drools.spi.KnowledgeHelper drools,
                     final java.util.Map applicationData)
    throws java.lang.Exception
  {
      final org.drools.examples.state.State b = (org.drools.examples.state.State) tuple.get(decls[0]);
      final org.drools.examples.state.State d = (org.drools.examples.state.State) tuple.get(decls[1]);
      System.out.println(d.getName() + " finished");
      d.setState("FINISHED");
      drools.modifyObject(d);
  }
}
/**
 * Petstore
 */
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.drools.examples.petstore.ShoppingCart;
public class DroolsConsequence implements org.drools.semantics.java.BlockConsequence$Script {
  public void invoke(final org.drools.spi.Tuple tuple,
                     final org.drools.rule.Declaration[] decls,
                     final org.drools.spi.KnowledgeHelper drools,
                     final java.util.Map applicationData)
    throws java.lang.Exception
  {
    final org.drools.examples.petstore.ShoppingCart cart = (org.drools.examples.petstore.ShoppingCart) tuple.get(decls[0]);
    final javax.swing.JFrame frame = (javax.swing.JFrame) applicationData.get("frame");
    Object[] options = new Object[] {
      "Yes",
      "No",
    };
    int n = JOptionPane.showOptionDialog(frame,
      "Would you like to buy a tank for your " +
      cart.getItems("Gold Fish").size() + " fish?",
      "Purchase Suggestion",
      JOptionPane.YES_NO_OPTION,
      JOptionPane.QUESTION_MESSAGE,
      null,
      options,
      options[0]);
      System.out.print("SUGGESTION: Would you like to buy a tank for your "
        + cart.getItems("Gold Fish").size() + " fish? - ");
      if (n == 0) {
        cart.addItem(new org.drools.examples.petstore.CartItem("Fish Tank", 25.0D));
        System.out.println("Yes");
      } else {
        System.out.println("No");
      }
      cart.setState("Suggested Fish Tank", true
    );
    drools.modifyObject(cart);
  }
}

--------------060706030809010901010608--
