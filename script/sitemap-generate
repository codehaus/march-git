#!/usr/bin/env ruby
################################################################################
#  Copyright 2006-2009 Codehaus Foundation
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
################################################################################
require File.dirname(__FILE__) + '/../config/boot'
require RAILS_ROOT + '/config/environment'

#require 'rubygems'
require 'builder'

# We are attempting to generate the minimum number of sitemaps that meet the following rules

# A sitemap may have at most 50000 URLs
# A sitemap may be at most 10M (uncompressed)
# Given that 10M == 200 bytes per URL; and most of our URLs will compress well; it is safe to assume 
# we can dump 50000 items into each file.
# The simplest solution is to just messages in order into files. The limit we will reach is 50 million messages.
# 50,000 URLs per file; 1000 files 

def compress(filename)
  cmd = "gzip -f #{filename}"
  if not system(cmd)
    puts "Failure running #{cmd}"
  end
end

class Info
  attr_reader :list
  attr_reader :start
  attr_reader :count
  
  def initialize(list, start = 0, count = -1)
    @list = list
    @start = start
    @count = count
  end
end

@archive_output = "#{RAILS_ROOT}/../shared/sitemap/"
@archive_host = ARGV[0] #archive.codehaus.org
@archive_prefix = ARGV[1] #haus/codehaus

lists = List.find(:all)

def maximum_indexed_message_id
  Sitemap.maximum(:last_message_id) || 0
end

def maximum_available_message_id
  Message.maximum(:id) || 0
end

#t.run(lists)
def generate_sitemap_index
  File.open("#{@archive_output}/sitemap.xml", 'w') { |io|
    xml = Builder::XmlMarkup.new(:target => io, :indent => 1)
    sitemaps = Sitemap.find(:all, :order => 'name')
    script = IO.read(File.dirname(__FILE__) + "/sitemap/generate-sitemap-sitemapindex.rxml")
    xml.instance_eval(script)
  }
end

def generate_lists_sitemap
  lists = List.find(:all, :order => 'identifier')
  File.open("#{@archive_output}/sitemap-lists.xml", 'w') { |io|
    xml = Builder::XmlMarkup.new(:target => io, :indent => 1)
    sitemaps = Sitemap.find(:all, :order => 'name')
    script = IO.read(File.dirname(__FILE__) + "/sitemap/generate-sitemap-lists.rxml")
    xml.instance_eval(script)
  }
  compress("#{@archive_output}/sitemap-lists.xml")
end

sitemaps = []
index = 0

if maximum_available_message_id <= maximum_indexed_message_id
  puts "All messages are indexed"
  generate_sitemap_index
  generate_lists_sitemap
  exit
end


sitemap = Sitemap.find_next
if sitemap.first_message_id
  puts "Incomplete batch - restarting at #{sitemap.first_message_id}"
  current_message_id = sitemap.first_message_id
else
  current_message_id = maximum_indexed_message_id + 1
end
last_message_id = maximum_available_message_id

while current_message_id < last_message_id
  first_batch_id = current_message_id
  puts "Roughly #{last_message_id - current_message_id} messages to process"
  
  sitemap = Sitemap.find_next(sitemap)
  
  
  puts "Loading messages (from #{first_batch_id})"
  messages = Message.find(:all, :conditions => [ 'id >= ?', first_batch_id ], :order => 'id', :limit => Sitemap::MAX_MESSAGES)
  break if messages.length == 0

  filename = sitemap.filename
  File.open("#{@archive_output}/#{filename}", 'w') { |io|
    xml = Builder::XmlMarkup.new(:target => io) #, :indent => 1
    puts 'Generating sitemap'
    puts "Processing from #{messages.first.id} to #{messages.last.id}"
    script = IO.read(File.dirname(__FILE__) + "/sitemap/generate-sitemap-sitemap.rxml")
    sitemap.message_count = messages.length
    sitemap.first_message_id = messages.first.id
    sitemap.last_message_id = messages.last.id
    sitemap.save!
    xml.instance_eval(script)
  }

  compress("#{@archive_output}/#{filename}")
  
  current_message_id = messages.last.id + 1
end

generate_sitemap_index