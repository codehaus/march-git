-- Find lists with messages that didn't load properly
BEGIN;
SET WORK_MEM = '512MB';
CREATE TEMP TABLE PARTS_UNLOADED ON COMMIT DROP AS
  SELECT P.ID AS PART_ID, P.MESSAGE_ID, M.LIST_ID FROM PARTS P, MESSAGES M
  WHERE CONTENT_ID IS NULL
    AND P.MESSAGE_ID = M.ID;
    
  
  
-- How many per list
SELECT L.ID AS LIST_ID, L.ADDRESS, COUNT(*)
FROM LISTS L, PARTS_UNLOADED PU
WHERE PU.LIST_ID = L.ID
GROUP BY L.ID, L.ADDRESS
ORDER BY COUNT(*) DESC;


SELECT SOURCE
FROM MESSAGES M, PARTS_UNLOADED PU
WHERE M.ID = PU.MESSAGE_ID
  AND PU.LIST_ID = 180
  AND M.SOURCE IS NOT NULL;
  
SELECT M.ID AS MESSAGE_ID, MESSAGE_ID822, SOURCE, COUNT(*)
FROM MESSAGES M, PARTS_UNLOADED PU
WHERE M.ID = PU.MESSAGE_ID
  AND PU.LIST_ID = 184
  AND M.MESSAGE_ID822 IS NOT NULL
GROUP BY M.ID, MESSAGE_ID822, M.SOURCE
ORDER BY M.ID;
  
COMMIT;



-- If you're loading data continuously; this will update the list, removing any fixed parts
DELETE FROM PARTS_UNLOADED PU
WHERE EXISTS (SELECT * FROM PARTS P WHERE P.ID = PU.PART_ID AND CONTENT_ID IS NOT NULL)
   OR NOT EXISTS (SELECT * FROM PARTS P WHERE P.ID = PU.PART_ID);


 -- How many per list
 SELECT L.ID AS LIST_ID, L.ADDRESS, COUNT(*)
 FROM LISTS L, PARTS_UNLOADED PU
 WHERE PU.LIST_ID = L.ID
 GROUP BY L.ID, L.ADDRESS
 ORDER BY COUNT(*) DESC;

--
SELECT SOURCE
FROM MESSAGES M, PARTS_UNLOADED PU
WHERE M.ID = PU.MESSAGE_ID
  AND M.SOURCE IS NOT NULL;













-- Find messages with ratings
select m.id, m.message_id822, m.rating_total, m.rating_count from messages m where m.rating_count > 0 order by m.rating_count desc;

